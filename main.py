from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from config import BOT_TOKEN, SPREADSHEET_ID
from google_sheets import add_user, update_task_status, get_unfinished_tasks
from tasks import TASKS
from reminders import start_scheduler

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    add_user(SPREADSHEET_ID, user.id, user.username)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Liberte üåû\n–í—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–µ.",
        reply_markup=ReplyKeyboardMarkup(
            [["üó∫ –ó–∞–¥–∞–Ω–∏—è", "üìç –ö–∞—Ä—Ç–∞"], ["üìú –ü—Ä–∞–≤–∏–ª–∞", "üéÅ –ë–æ–Ω—É—Å—ã"], ["–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "–û –ø—Ä–æ–µ–∫—Ç–µ"]],
            resize_keyboard=True
        )
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id

    if text == "üó∫ –ó–∞–¥–∞–Ω–∏—è":
        await update.message.reply_text(TASKS[1] + "\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç.")
        context.user_data["current_task"] = 1

    elif text == "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ":
        unfinished = get_unfinished_tasks(SPREADSHEET_ID, user_id)
        if unfinished:
            await update.message.reply_text("\n".join(unfinished))
        else:
            await update.message.reply_text("–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")

    elif "current_task" in context.user_data:
        task_number = context.user_data["current_task"]
        update_task_status(SPREADSHEET_ID, user_id, task_number, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ", text)
        await update.message.reply_text(f"–ó–∞–¥–∞–Ω–∏–µ {task_number} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! ‚úÖ")
        context.user_data.pop("current_task")

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

start_scheduler(BOT_TOKEN)
app.run_polling()
